# This file is intended to be used as a starting point for local
# development. You should be able to copy it as-is into a file
# named `.env` as a sibling of this file, and be able to run the
# passport server and clientin a development mode where it neither
# reads nor writes to any external or 3rd party services, like the
# Zuzalu ticketing system or our email provider. You will be able
# to input any email into the login page email input, hit 'Generate
# Pass', and get logged into the passport as a test user. Then, you
# will also be able to use the consumer client to request proofs
# on behalf of this test user, with everything working properly
# and as expected.
##################################################################

# WARNING! Never set this environment variable in production!
# This variables tells the passport server to let anyone register
# even if they use a fake and invalid email. This is intended
# for development purposes only, so that you can run the entire
# application stack locally without depending on 3rd party services.
BYPASS_EMAIL_REGISTRATION=true

# The following environment variables connect the passport server
# to a postgres database that runs on the developer's machine. You
# can start a postgres instance locally by running the following
# commands from within the passport server application directory:
#
# yarn localdb:init
# yarn localdb:up
#
# To stop the postgres instance, you can run `yarn localdb:down`
#
# Alternatively, you could start a local postgres instance a different
# way. In any case, make sure these environment variables point to a
# working postgres database, and that the credentials you set here are
# correct, as that is necessary even for local development.
#
DATABASE_HOST=localhost
DATABASE_USERNAME=admin
DATABASE_PASSWORD=password
DATABASE_DB_NAME=postgres
DATABASE_SSL=false

# The port on which this server runs. We recommend `3002` for convenient
# local integration with the rest of the services that run within this
# repository.
PORT=3002

# The passport server needs to know where it itself can be accessed in order
# to be able to create URLs that point to itself.
PASSPORT_SERVER_URL="http://localhost:3002"
PASSPORT_CLIENT_URL="http://localhost:3000"

# To enable error reporting, both these environment variables must be set
#ROLLBAR_TOKEN=
#ROLLBAR_ENV_NAME=

# To enable server-issued PCDs, the server needs an RSA and an EdDSA private key. You can generate both
# using the following commands at the root of the project, after installing dependencies and building
# the project:
# node -e 'console.log(Buffer.from(new (require("node-rsa"))({b:2048}).exportKey("private")).toString("base64"))'
SERVER_RSA_PRIVATE_KEY_BASE64=LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdlB1Z3pqSTY1NFdYMDY0WTNTdHFVTVFaYVdiRkYrNGg5V0hCd0VWUTlibTdYL01WCi8xWGg0OXErbmJrODBrT3J4SEF1TGRpeWRzL0RFZlNaeCtFcUhMMEtqTTJpd3U4aUtDaTB4ekl5L0hPTGhEeVAKVjV6a2ZXYU9ZWVVCVXlVSDFxMExFajQvODhHTEFtYnNMMWZ0bUVYZTNybS9jUVljWXBjOTRabllobVNyaExLNgpzZ1Izay9JRERXQXVoTmp3MkdzSXJnemUzc0hPbDBlRGlLWFZsdmhQUnI5d2JOODViVDNHUWtuRWVBNFkxUGk0CkFnck1aaWdza3RjRnROOVBrcnJYSDF5MWk5Y3ZwRTAvRFE2NUt4a050bjZqenUrTk9wYkw4clhoTzVzQ3V5TzYKdFFaVkxpaHRwd3JTcFI3Y0o2RE9MUkxiZGpVSmZHWXFWWjFMcndJREFRQUJBb0lCQUNzK0dLbVY3TXlWVVF4cQp4ZDIxMVhudHBUTHRCU1JZcFFTVS9kU1ZCOVZ5VG1IQ0tjSm5VR3ptM0w4U1o4eGxGNlMzVnBtKy8vY1h5emNNCmxUT2JYaHQ5VmpDcHpSaDF4NGNRNld5N0c5ZVFTTmhWVXlkbEN4TjJxQlhBYlhFdEJBSW5UbVU2UVQveGhYRmoKUTZBQnFxZ3hOTElhSnFnaUVkU3Ric2QwZ0lzZmtQWS9UTW9CRW5yQkVjTkd3SFp5YTZHL2hBellnZ3M1NTNmSApiNVhoR3F6VGJVTkFOcVhOd3F0VWhJL0RydUZCQnFBQ0h2RkVXd09tMFdpM1FOZloydnFLS28zSDlNdVpWbWI0Ck82WFUxeFY1bGViSlIrZlRyaVZHMDh0UEl1MDFWajVqVThXYTJIaEsxd3oycEYvejdxMFNlS1JuNXY2d1NaZ0YKVXlDcjZzRUNnWUVBN2drWkNid0VFMmVWT2lHTzk5Tk5UUE1wUGloSXpKODBpeHNYMm5HdkpQSGtEMmdxV2RMYwpkZUY5SFQybkg4QmRjVXFHb01IR01vMVBTS1crV0t2RW9ETCtrVTNtUGs4eHpwZkZrQStWeEpuaE11bmtqeGI1CkxXL2ltd3BiZ0cvNHg2aHViRDVsQlNQOHJnMlhJSm84bnBoSzRKSXluV1JPUEY3RkJNWFdlVmNDZ1lFQXl6N1MKaFUzOUxIU3ZEeTR1YlUwTW1FakRPb0RvZkcrT2xWUjJqUklKREpkMFcrT0t2cTg5akk3VzJzci9xNnFtTlh6RwpwVG5LK3hXb1k5VHBpR0hDbmhkVmZEMytMQkFXZmpPTFFncGV0K1FKUzRmOVVqbHdCaStMUlNiYUdkZHhSNlJtCnZmVHBsMGFMNTU0aWUxN005WUNSQ0ppLzlEV3g4YVNVTCtnblVXa0NnWUIrbGMvKzRVRzVvQWczMWNqVitrVE4KZXpLZm40UzNiS0xncHhQVVUwaTArUDR6UTAzaVhzUm0yL2RSS1l4SzBsM2U5YWNLcm9IY09GSEZiSDhCWUxjOApDbUplbTNLcUNDdVFsaDIyTXRPT3JkYVk0TkZ2VnVSRVNZL1VxM2xsb0NaSTUwVnh3dXl1QXlsSTFtbGNLU203Cm5YbVVXNnNYRUZTYXZqdEFBb1hBR1FLQmdGc1c0TXNWMU8zanJjR2o5UExQb1dGdTJ2Q1JiYUMzYnJQR2t3dE8KbGZlcXVWK2xiejFlMUxyMkdaMGRkZEMrUHBlaVFIVTBuYUJDYUtHMWZxUzlDN2hHeE8xVjYyQmNKWGlTS1V1RAowa2VnVC9vbURJYVpiM2VXUDFqU3ZOVHdGYmtDR1hueEZlL1Nra2xRT2l3SXBOc3lyODJtaUFFdlAzMEpRZERtCnZ4aGhBb0dCQUovSHBsOVllS1A4ZmQ4dXVFaHdnTGNIZzNiWWFuTTJwR1hIVitxQzNQZ05mTGpXYlFDZUJFYUEKRWQrQ1BneHd3ZjllOTNJdEFSL1o3UmVnRE1CWjBEL0k2cmZRWnExYm1UK1hscHdHdXNHcWVvV2trWS9IVE1jVwpDOEM5Y05aenpjYWpkVjY5eW0rV09BZkw5WTM4Z0lqWGxNNzdObEVPaXRFd1hQdGRWeWhSCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
# node -e 'console.log(require("@pcd/eddsa-pcd").newEdDSAPrivateKey())'
SERVER_EDDSA_PRIVATE_KEY=e32dec34668943c0bfec458b953d3ad1519d66e013ca780d8dac1024f253df01

# To enable notifications from the server to be sent to Discord
#DISCORD_TOKEN=
#DISCORD_ALERTS_CHANNEL_ID=

# For Telegram-gated authentication and anonymous message posting
TELEGRAM_BOT_TOKEN=
TELEGRAM_BOT_START_DELAY_MS=0

# For anonymous message posting rate limit (per topic)
MAX_DAILY_ANON_TOPIC_POSTS_PER_USER=3
# url for anon-message-client
TELEGRAM_BOT_ANON_WEBSITE=
# generated telegram web app for anon-message-client
TELEGRAM_ANON_BOT_WEBAPP=

# To disable syncing tickets from Pretix for local development
PRETIX_SYNC_DISABLED=

# If true, you have set up a local cert for dev.local for hot reloading locally with https
# https://github.com/proofcarryingdata/zupass/blob/main/bot.md#6-optional-hot-reloading-for-tg-development
IS_LOCAL_HTTPS=false

# Allow a maximum of this many account resets:
# ACCOUNT_RESET_LIMIT_QUANTITY=5
# .. Per this amount of time
# ACCOUNT_RESET_LIMIT_DURATION_MS=86400000 # 24 hours
# These values don't need to be explicitly configured as they have sane defaults.
# The limit can also just be disabled by setting this environment variable to 'true',
# which we've done here for local development
ACCOUNT_RESET_RATE_LIMIT_DISABLED='true'

# Set this to an integer value between 1 and the number of
# CPU cores you have available. The server offloads CPU-bound
# tasks to these workers
# WORKER_QUANTITY=

# The Telegram Bot Direct Link, created by DMing Botfather with /newapp
# eg: https://t.me/cha0sg0d_bot/anon
# Make sure that the web app url is set to PASSPORT_SERVER_URL/telegram/anon
# eg: https://dev.local:3002/telegram/anon
TELEGRAM_ANON_BOT_DIRECT_LINK=
# The anonymous message client, like https://dev.local:4000 or https://zk-tg.com
TELEGRAM_ANON_WEBSITE=

# The base URL for the Tripsha endpoint
ZUCONNECT_TRIPSHA_URL=
# Authentication key for Tripsha
ZUCONNECT_TRIPSHA_KEY=
# Zuconnect "mock" tickets will be issued to email addresses in this stringified JSON array
ZUCONNECT_MOCK_TICKETS='["test@example.com", "another@example.com"]'

# For Kudosbot's Telegram bot
TELEGRAM_KUDOSBOT_TOKEN=

# A stringified JSON array of email addresses whose Zupass user can manage FrogCrypto via UI and api routes
# e.g. '["test@example.com"]'
FROGCRYPTO_ADMIN_USER_EMAILS=

# The base URL for frogcrypto assets
FROGCRYPTO_ASSETS_URL=

# The telegram chat id for frog owners
FROG_OWNERS_TELEGRAM_CHAT_ID=
